/*
create interface Electronic_Appliance with on and off  methods
define two implementations Tv and Refrigerator
create ArrayList for Electronic_Appliance  i.e.  new ArrayList<Electronic_Appliance>
store Tv and Refrigerator inside ArrayList. Store ArrayList inside the file
read the list from the file and traverse it using Iterator. Also while iterating invoke on 
and off  methods.
*/
//package Practice;
//import java.util.*;
//import java.io.*;


/*interface Electronic_Appliance extends Serializable
{
	//Electronic s1 = null;
	void on();
	void off();
}

class Tv implements Electronic_Appliance {
	private String brand;
	
	public Tv(String brand) {
		this.brand = brand;
	}
	
	public void on() {
		System.out.println(brand + " TV is now on");
	}
	
	public void off() {
		System.out.println(brand + " TV is now off");
	}
	
	public String toString() {
		return "TV [Brand : " + brand + "]";
	}
}

class Refrigerator implements Electronic_Appliance {
	private String brand;
	
	public Refrigerator(String brand) {
		this.brand = brand;
	}
	
	public void on() {
		System.out.println(brand + " Refrigerator is now on");
	}
	
	public void off() {
		System.out.println(brand + " Refrigerator is now off");
	}
	
	public String toString() {
		return "Fridge [Brand : " + brand + "]";
	}
}

public class Ques3 {
	public static void main(String args[]) {
		List<Electronic_Appliance> appliances = new ArrayList<>();
		appliances.add(new Tv("Samsung"));
		appliances.add(new Refrigerator("LG"));
		
		try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("ABC.txt"))) {
			oos.writeObject(appliances);
			System.out.println("Appliances have been serialized to ABC.txt");
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("ABC.txt"))) {
			List<Electronic_Appliance> deserializedAppliances = (List<Electronic_Appliance>) ois.readObject();
            System.out.println("Appliances have been deserialized from ABC.txt");
            
            Iterator<?> itr = deserializedAppliances.iterator();
            
            while(itr.hasNext()) {
            	System.out.println(itr.next());
            	System.out.println(appliances);
            	((Electronic_Appliance) appliances).on();
            	((Electronic_Appliance) appliances).off();
            }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
		*/
//		try {
//			FileOutputStream fos = new FileOutputStream("Test.txt");
//			ObjectOutputStream oos = new ObjectOutputStream(fos);
//			oos.writeObject(appliances);
//			
//			FileInputStream fis = new FileInputStream("Test.txt");
//			ObjectInputStream ois = new ObjectInputStream(fis);
//			
//			List<?> ref = (List<?>) ois.readObject();
//			
//			System.out.println("Appliance are");
//			
//			Iterator<?> itr = ref.iterator();
//			
//			while(itr.hasNext()) {
//				System.out.println(itr.next());
//				((Electronic_Appliance) appliances).on();
//				((Electronic_Appliance) appliances).off();
//			}
//		}catch(Exception e) {
//			e.printStackTrace();
//		}
		
//	}
//}


import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

// Step 1: Define the Electronic_Appliance interface
interface Electronic_Appliance extends Serializable {
    void on();
    void off();
}

// Step 2: Implement the Tv class
class Tv implements Electronic_Appliance {
    private String brand;

    public Tv(String brand) {
        this.brand = brand;
    }

    @Override
    public void on() {
        System.out.println(brand + " TV is now ON.");
    }

    @Override
    public void off() {
        System.out.println(brand + " TV is now OFF.");
    }

    @Override
    public String toString() {
        return "TV Brand: " + brand;
    }
}

// Step 2: Implement the Refrigerator class
class Refrigerator implements Electronic_Appliance {
    private String brand;

    public Refrigerator(String brand) {
        this.brand = brand;
    }

    @Override
    public void on() {
        System.out.println(brand + " Refrigerator is now ON.");
    }

    @Override
    public void off() {
        System.out.println(brand + " Refrigerator is now OFF.");
    }

    @Override
    public String toString() {
        return "Refrigerator Brand: " + brand;
    }
}

// Step 3: Main class to demonstrate the functionality
public class Ques3 {
    public static void main(String[] args) {
        List<Electronic_Appliance> appliances = new ArrayList<>();
        appliances.add(new Tv("Samsung"));
        appliances.add(new Refrigerator("LG"));

        // Step 4: Serialize the list to a file
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("appliances.dat"))) {
            oos.writeObject(appliances);
            System.out.println("Appliances have been serialized to appliances.dat");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Step 5: Deserialize the list from the file
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("appliances.dat"))) {
            List<Electronic_Appliance> deserializedAppliances = (List<Electronic_Appliance>) ois.readObject();
            System.out.println("Appliances have been deserialized from appliances.dat");

            // Step 6: Iterate over the list and invoke on and off methods
            Iterator<Electronic_Appliance> iterator = deserializedAppliances.iterator();
            while (iterator.hasNext()) {
                Electronic_Appliance appliance = iterator.next();
                System.out.println(appliance);
                appliance.on();
                appliance.off();
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}














